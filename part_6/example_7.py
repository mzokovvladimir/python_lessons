import inspect
import example_7
from pprint import pprint

for name, data in inspect.getmembers(example_7):
    if name.startswith('__'):
        continue
    print('{} : {!r}'.format(name, data))

print("------------------------------------------------------------")

# Можна отримати усі класи, які є у модулі та виконати дію, коли знайшли клас, який шукали:
for key, data in inspect.getmembers(example_7, inspect.isclass):
    print('{} : {!r}'.format(key, data))
print("------------------------------------------------------------")
# Вивчення методів класу. Зверніть увагу, що ми використовуємо один і той же метод getmembers
# відмінність тільки у ідентификаторі властивості, тобто isfunction:
pprint(inspect.getmembers(example_7.MyClass, inspect.isfunction))
print("------------------------------------------------------------")

# За допомогою модулю inspect можна відстежувати усі екземпляри класу, які створені у програмі, за допомогою одного
# виклику функції:
m_c = example_7.MyClass(surname='Petrenko', name='Ivan', age=23)
pprint(inspect.getmembers(m_c, inspect.ismethod))
print("------------------------------------------------------------")

# Отримання рядка документації для класу. Модуль inspect часто використовується в інструментах Python, які
# автоматизирують процес видобування класів та рядків документації їх методів, які можуть бути представлені кінцевим
# користувачам. Це означає, що розробник може просто помістити рядки документації у метод, та той же рядок можна
# використати для представлення іншому розробнику додатку:
print('MyClass.__doc__:')
print(example_7.MyClass.__doc__)
print("------------------------------------------------------------")
print('getdoc(MyClass):')
print(inspect.getdoc(example_7.MyClass))
print("------------------------------------------------------------")

# Отримання коду класу В інтелектуальних середовищах, таких як IDE, модуль inspect використовується для
# подання вихідного коду модулів, класів та функцій:
print(inspect.getsource(example_7.MyClass))
print("------------------------------------------------------------")
# for elem in inspect.getsource(example_3.MyClass):
#    print(elem)
print("------------------------------------------------------------")
# Отримання джерела методу на цей раз ми отримуємо вихідний код лише одного методу:
print(inspect.getsource(example_7.MyClass.__str__))
print("------------------------------------------------------------")

# Як останній приклад ми отримаємо сигнатуру методу, щоб уявити розробникам, які аргументи приймає метод:
print(inspect.signature(example_7.test))
# Це може бути корисно для створення загальних обгорток або декораторів.
