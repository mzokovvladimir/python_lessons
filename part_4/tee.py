"""
tee(iterable, n=2): Створює n незалежних ітераторів з одного ітерабельного об'єкта.
"""

from itertools import tee

numbers = [1, 2, 3, 4, 5]

iter1, iter2 = tee(numbers, 2)

print(list(iter1))  # [1, 2, 3, 4, 5]
print(list(iter2))  # [1, 2, 3, 4, 5]

"""
Функція tee з модуля itertools надає декілька переваг, особливо коли вам потрібно мати кілька незалежних ітераторів 
для обробки одного і того ж самого ітерабельного об'єкта:

Ліниве вироблення: tee є лінивою функцією, що означає, що вона не виробляє копії даних наперед, а створює незалежні 
ітератори, які можуть бути використані для обходження початкового ітерабельного об'єкта.

Ефективність пам'яті: Замість створення копії повного набору даних, tee дозволяє створювати незалежні копії елементів 
при необхідності. Це особливо важливо, якщо початковий ітерабельний об'єкт великий.
"""

data = [1, 2, 3, 4, 5]

iter1, iter2 = tee(data, 2)

# iter1 та iter2 тепер незалежні ітератори, які можна використовувати окремо
for item in iter1:
    print(item)

for item in iter2:
    print(item)

"""
Підтримка паралельного обходження: За допомогою tee можна створити декілька незалежних ітераторів, які можна 
використовувати паралельно для різних обчислень чи аналізу.
"""

data = [1, 2, 3, 4, 5]

iter1, iter2 = tee(data, 2)

# Застосування різних операцій до двох незалежних ітераторів паралельно
result1 = [item * 2 for item in iter1]
result2 = [item ** 2 for item in iter2]

"""
Можливість подальшого модифікування одного з ітераторів: Оскільки ітератори, створені за допомогою tee, незалежні, ви 
можете змінювати один з них, не впливаючи на інший.
"""

data = [1, 2, 3, 4, 5]

iter1, iter2 = tee(data, 2)

# Модифікація одного з ітераторів
modified_iter1 = map(lambda x: x + 10, iter1)
"""
Зручність при роботі з генераторами: tee добре співпрацює з генераторами, адже створює незалежні ітератори для обробки 
даних, що генеруються динамічно."""


def generator_function():
    yield 1
    yield 2
    yield 3


gen = generator_function()

iter1, iter2 = tee(gen, 2)

for item in iter1:
    print(item)

for item in iter2:
    print(item)

"""
В цілому, tee дозволяє створювати незалежні ітератори для одного і того ж самого ітерабельного об'єкта, що робить її 
корисною для оптимізації витрат пам'яті і підтримки паралельного обходження даних.
"""
